var mongo = require('mongodb');
var Chat = require('../controller/chat');
const resMsg = require("../../settings/service/message");
const ChatMessage = require('../models/chat.model');
const rag = require('./aiservice');
const reportService = require('../../report/service/report');

exports.getChatHistory = async (userId) => {
  try {
    const messages = await ChatMessage.find({ userId }).sort({ createdAt: 1 });
    return { success: true, messages };
  } catch (error) {
    console.error('Error getting chat history:', error);
    return { success: false, error: 'Failed to get chat history' };
  }
};

exports.processMessage = async (userId, message) => {
  try {
    console.log(`üí¨ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: ${userId}`);
    
    // Save user message
    const userMsg = new ChatMessage({ userId, role: 'user', text: message });
    await userMsg.save();
    console.log('‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');

    // Intent: ‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏ß‡∏°‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
    if (/‡∏£‡∏ß‡∏°(‡πÄ‡∏Ñ‡∏™|‡∏Å‡∏•‡∏∏‡πà‡∏°|case|group)|‡∏Ñ‡∏ß‡∏£(‡∏£‡∏ß‡∏°|‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°)/i.test(message)) {
      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å suggestGroups (AI reasoning & suggest)
      // mock request/response object for service
      const req = { query: { useContent: 'true', contentSim: '0.7' } };
      let aiReply = '';
      await reportService.suggestGroups(req, {
        status: (code) => ({
          json: (data) => {
            if (data.groups && data.groups.length > 0) {
              aiReply = 'AI ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏£‡∏ß‡∏°‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:\n';
              data.groups.forEach((g, idx) => {
                aiReply += `‡∏Å‡∏•‡∏∏‡πà‡∏° ${idx + 1}: ${g.reportIds.join(', ')}\n‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: ${g.reason}\n\n`;
              });
            } else {
              aiReply = 'AI ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏£‡∏ß‡∏°‡∏Å‡∏±‡∏ô‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ';
            }
          }
        })
      }, null);
      // Save AI response
      const aiMsg = new ChatMessage({ userId, role: 'ai', text: aiReply });
      await aiMsg.save();
      return { success: true, response: aiReply };
    }

    // Default: ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô AI ‡πÄ‡∏î‡∏¥‡∏°
    const chatHistoryDocs = await ChatMessage.find({ userId })
      .sort({ createdAt: -1 })
      .limit(5)  // ‡∏•‡∏î‡∏•‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 5 ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
      .lean();
    
    console.log(`üìö ‡∏û‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤ ${chatHistoryDocs.length} ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°`);

    // ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏° Classifier Agent
    const aiResponse = await rag.processUserMessage(message);
    
    console.log('ü§ñ ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å AI');

    // Save AI response
    const aiMsg = new ChatMessage({ userId, role: 'ai', text: aiResponse });
    await aiMsg.save();
    console.log('‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡∏≠‡∏á AI ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');

    return { success: true, response: aiResponse };

  } catch (error) {
    console.error('‚ùå Error in processMessage:', error);
    return { 
      success: false, 
      error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°',
      details: error.message 
    };
  }
};

exports.getChatHistoryService = async function (request, response, next) {
    try {
        const { userId } = request.params;
        const result = await exports.getChatHistory(userId);
        
        if (result.success) {
            var resData = await resMsg.onMessage_Response(0, 20000);
            resData.data = result.messages;
            response.status(200).json(resData);
        } else {
            var resData = await resMsg.onMessage_Response(0, 40400);
            response.status(500).json(resData);
        }
    } catch (err) {
        var resData = await resMsg.onMessage_Response(0, 40400);
        response.status(500).json(resData);
    }
};

exports.sendMessageService = async function (request, response, next) {
    try {
        const { userId, message } = request.body;

        if (!userId || !message) {
            var resData = await resMsg.onMessage_Response(0, 40000);
            resData.message = 'Missing userId or message';
            return response.status(400).json(resData);
        }

        const result = await exports.processMessage(userId, message);
        
        if (result.success) {
            var resData = await resMsg.onMessage_Response(0, 20000);
            resData.data = { response: result.response };
            response.status(200).json(resData);
        } else {
            var resData = await resMsg.onMessage_Response(0, 40400);
            resData.message = result.error;
            response.status(500).json(resData);
        }
    } catch (err) {
        var resData = await resMsg.onMessage_Response(0, 40400);
        response.status(500).json(resData);
    }
};

exports.onQuery = async function (request, response, next) {
    try {
        var querys = {};
        if (request.params && request.params.id) {
            querys._id = request.params.id;
        }
        const doc = await Chat.onQuery(querys);
        var resData = await resMsg.onMessage_Response(0,20000)
        resData.data = doc
        response.status(200).json(resData);
    } catch (err) {
        var resData = await resMsg.onMessage_Response(0,40400)
        response.status(404).json(resData);
    }
};

exports.onQuerys = async function (request, response, next) {
    try {
        var querys = {};
        if (request.query) {
            querys = { ...querys, ...request.query };
        }
        const doc = await Chat.onQuerys(querys);
        var resData = await resMsg.onMessage_Response(0,20000)
        resData.data = doc
        response.status(200).json(resData);
    } catch (err) {
        var resData = await resMsg.onMessage_Response(0,40400)
        response.status(404).json(resData);
    }
};

exports.onCreate = async function (request, response, next) {
    try {
        const doc = await Chat.onCreate(request.body);
        var resData = await resMsg.onMessage_Response(0,20000)
        resData.data = doc
        response.status(200).json(resData);
    } catch (err) {
        var resData = await resMsg.onMessage_Response(0,40400)
        response.status(404).json(resData);
    }
};

exports.onUpdate = async function (request, response, next) {
    try {
        var query = {}
        query._id = new mongo.ObjectId(request.body._id);
        const doc = await Chat.onUpdate(query, request.body);
        var resData = await resMsg.onMessage_Response(0,20000)
        resData.data = doc
        response.status(200).json(resData);
    } catch (err) {
        var resData = await resMsg.onMessage_Response(0,40400)
        response.status(404).json(resData);
    }
};

exports.onDelete = async function (request, response, next) {
    try {
        var query = {};
        query._id = new mongo.ObjectId(request.body.id)
        const doc = await Chat.onDelete(query);
        var resData = await resMsg.onMessage_Response(0,20000)
        resData.data = doc
        response.status(200).json(resData);
    } catch (err) {
        var resData = await resMsg.onMessage_Response(0,40400)
        response.status(404).json(resData);
    }
};
